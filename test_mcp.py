"""
Test script to verify MCP server is working with simplified tools
"""
import asyncio
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
import json

async def test_mcp():
    print("üß™ Testing MCP server connection...")
    
    server_params = StdioServerParameters(
        command="python",
        args=["actions.py"]
    )
    
    async with stdio_client(server_params) as (read, write):
        print("‚úÖ Connected to MCP server")
        
        async with ClientSession(read, write) as session:
            print("‚úÖ Session created")
            
            await session.initialize()
            print("‚úÖ Session initialized")
            
            # List tools
            tools = await session.list_tools()
            print(f"\nüìã Available tools ({len(tools.tools)}):")
            for tool in tools.tools:
                print(f"   - {tool.name}: {tool.description}")
            
            # Test check_calendar
            print("\nüß™ Test 1: check_calendar")
            result = await session.call_tool("check_calendar", {})
            data = json.loads(result.content[0].text)
            print(f"   ‚úÖ Result: {json.dumps(data, indent=6)}")
            
            # Test get_meal_history
            print("\nüß™ Test 2: get_meal_history")
            result = await session.call_tool("get_meal_history", {"days": 7})
            data = json.loads(result.content[0].text)
            print(f"   ‚úÖ Result: {json.dumps(data, indent=6)}")
            
            # Test get_user_preferences
            print("\nüß™ Test 3: get_user_preferences")
            result = await session.call_tool("get_user_preferences", {})
            data = json.loads(result.content[0].text)
            print(f"   ‚úÖ Taste: {data['taste']}")
            print(f"   ‚úÖ Food Style: {data['food_style']}")
            print(f"   ‚úÖ Ingredients: {', '.join(data['ingredients'])}")
            
            # Test generate_final_menu
            print("\nüß™ Test 4: generate_final_menu")
            context = {
                "meal_type": "dinner",
                "number_of_people": 2,
                "time_available": "quick",
                "specific_requests": "something light and healthy",
                "preferences": {
                    "taste": "spicy",
                    "food_style": "modern",
                    "ingredients": ["wheat flour", "pulses", "rice"]
                }
            }
            result = await session.call_tool("generate_final_menu", {"context_json": json.dumps(context)})
            data = json.loads(result.content[0].text)
            print(f"   ‚úÖ Success: {data['success']}")
            if data['success']:
                print(f"   ‚úÖ Generated by: {data.get('generated_by', 'unknown')}")
                print(f"   ‚úÖ Menu preview:")
                menu_lines = data['menu'].split('\n')[:8]
                for line in menu_lines:
                    print(f"      {line}")
                if len(data['menu'].split('\n')) > 8:
                    print(f"      ...")
            else:
                print(f"   ‚ö†Ô∏è  Error: {data.get('error', 'Unknown error')}")
            
            print("\n‚úÖ All tests passed!")

if __name__ == "__main__":
    asyncio.run(test_mcp())
